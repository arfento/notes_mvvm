// Mocks generated by Mockito 5.4.0 from annotations
// in notes_mvvm/test/presentation/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:notes_mvvm/data/datasources/db/database_helpers.dart' as _i3;
import 'package:notes_mvvm/domain/models/visual_note_model.dart' as _i5;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DatabaseHelpers].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelpers extends _i1.Mock implements _i3.DatabaseHelpers {
  MockDatabaseHelpers() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i4.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#database),
        )),
      ) as _i4.Future<_i2.Database>);
  @override
  _i4.Future<_i2.Database> initDb() => (super.noSuchMethod(
        Invocation.method(
          #initDb,
          [],
        ),
        returnValue: _i4.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.method(
            #initDb,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Database>);
  @override
  _i4.Future<List<_i5.VisualNoteModel>> getAllNotes() => (super.noSuchMethod(
        Invocation.method(
          #getAllNotes,
          [],
        ),
        returnValue: _i4.Future<List<_i5.VisualNoteModel>>.value(
            <_i5.VisualNoteModel>[]),
      ) as _i4.Future<List<_i5.VisualNoteModel>>);
  @override
  _i4.Future<dynamic> addNotes(
          {required _i5.VisualNoteModel? visualNoteModel}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNotes,
          [],
          {#visualNoteModel: visualNoteModel},
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> deleteNotes({required String? noteId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteNotes,
          [],
          {#noteId: noteId},
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> updateNotes({
    required String? noteId,
    required _i5.VisualNoteModel? visualNoteModel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateNotes,
          [],
          {
            #noteId: noteId,
            #visualNoteModel: visualNoteModel,
          },
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> deleteMultipleNotes({required List<String>? noteIds}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteMultipleNotes,
          [],
          {#noteIds: noteIds},
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> deleteAllNotes() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllNotes,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
}
